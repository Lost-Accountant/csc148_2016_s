library(bpa)
library(tidyverse)
library(kableExtra)
library(knitr)
library(leaflet)
agency = read_csv('agency.txt', trim_ws = TRUE)
stops = read.csv('stops.txt', encoding="UTF-8")
kable(head(stops))
View(agency)
View(stops)
# visualize the stops
stop_maps = leaflet() %>%
# Add CartoDB background map
addProviderTiles("CartoDB.DarkMatter") %>%
# Add a marker for each stop
addCircleMarkers(lng= ~ stop_lon, lat= ~stop_lat,
data = head(stops,100), stroke = FALSE,
fillOpacity = 0.5, radius =5 )
stop_maps  # Show the map
agency = read_csv('agency.txt', trim_ws = TRUE)
stops = read.csv('stops.txt', encoding="UTF-8")
kable(head(stops))
View(stops)
# visualize the stops
stop_maps = leaflet() %>%
# Add CartoDB background map
addProviderTiles("CartoDB.DarkMatter") %>%
# Add a marker for each stop
addCircleMarkers(lng= ~ stop_lon, lat= ~stop_lat,
data = stops, stroke = FALSE,
fillOpacity = 0.5, radius =5 )
stop_maps  # Show the map
# visualize the stops
stop_maps = leaflet() %>%
# Add CartoDB background map
addProviderTiles("CartoDB.DarkMatter") %>%
# Add a marker for each stop
addCircleMarkers(lng= ~ stop_lon, lat= ~stop_lat,
data = stops, stroke = TRUE,
fillOpacity = 0.5, radius =1 )
stop_maps  # Show the map
View(stops)
# visualize the stops
stop_maps = leaflet() %>%
# Add CartoDB background map
addProviderTiles("CartoDB.DarkMatter") %>%
# Add a marker for each stop
addCircleMarkers(lng= ~ stop_lon, lat= ~stop_lat,
data = stops, stroke = FALSE,
fillOpacity = 0.5, radius =1)
stop_maps  # Show the map
# visualize the stops
stop_maps = leaflet() %>%
# Add CartoDB background map
addProviderTiles("CartoDB.DarkMatter") %>%
# Add a marker for each stop
addCircleMarkers(lng= ~ stop_lon, lat= ~stop_lat,
data = stops, stroke = FALSE,
fillOpacity = 0.5, radius = 2)
stop_maps  # Show the map
# visualize the stops
stop_maps = leaflet() %>%
# Add CartoDB background map
addProviderTiles("CartoDB.DarkMatter") %>%
# Add a marker for each stop
addCircleMarkers(lng= ~ stop_lon, lat= ~stop_lat,
data = stops, stroke = FALSE,
fillOpacity = 0.5, radius = 5)
stop_maps  # Show the map
agency = read_csv('agency.txt', trim_ws = TRUE)
stops = read.csv('stops.txt', encoding="UTF-8")
stoptime = read.csv('stop_times.txt', encoding="UTF-8")
kable(head(stops))
View(stoptime)
agency = read_csv('agency.txt', trim_ws = TRUE)
stops = read.csv('stops.txt', encoding="UTF-8")
stoptime = read.csv('stop_times.txt', encoding="UTF-8")
trips = read.csv("trips.txt", encoding="UTF-8")
kable(head(stops))
View(trips)
agency = read_csv('agency.txt', trim_ws = TRUE)
stops = read.csv('stops.txt', encoding="UTF-8")
stoptime = read.csv('stop_times.txt', encoding="UTF-8")
trips = read.csv("trips.txt", encoding="UTF-8")
routes = read.csv("routes.txt", encoding="UTF-8")
kable(head(stops))
View(routes)
View(stoptime)
View(trips)
# visualize the stops
stop_maps = leaflet() %>%
# Add CartoDB background map
addProviderTiles() %>%
# Add a marker for each stop
addCircleMarkers(lng= ~ stop_lon, lat= ~stop_lat,
data = stops, stroke = FALSE,
fillOpacity = 0.5, radius = 5)
library(bpa)
library(tidyverse)
library(kableExtra)
library(knitr)
library(leaflet)
agency = read_csv('agency.txt', trim_ws = TRUE)
stops = read.csv('stops.txt', encoding="UTF-8")
stoptime = read.csv('stop_times.txt', encoding="UTF-8")
trips = read.csv("trips.txt", encoding="UTF-8")
routes = read.csv("routes.txt", encoding="UTF-8")
kable(head(stops))
# visualize the stops
stop_maps = leaflet() %>%
# Add CartoDB background map
addProviderTiles() %>%
# Add a marker for each stop
addCircleMarkers(lng= ~ stop_lon, lat= ~stop_lat,
data = stops, stroke = FALSE,
fillOpacity = 0.5, radius = 5)
# visualize the stops
stop_maps = leaflet() %>%
# Add CartoDB background map
addProviderTiles("OpenStreetMap.Mapnik") %>%
# Add a marker for each stop
addCircleMarkers(lng= ~ stop_lon, lat= ~stop_lat,
data = stops, stroke = FALSE,
fillOpacity = 0.5, radius = 5)
stop_maps  # Show the map
# visualize the stops
stop_maps = leaflet() %>%
# Add CartoDB background map
addProviderTiles("OpenStreetMap.Mapnik") %>%
# Add a marker for each stop
addCircleMarkers(lng= ~ stop_lon, lat= ~stop_lat,
data = stops, stroke = FALSE,
fillOpacity = 5, radius = 5)
stop_maps  # Show the map
# visualize the stops
stop_maps = leaflet() %>%
# Add CartoDB background map
addProviderTiles("OpenStreetMap.Mapnik") %>%
# Add a marker for each stop
addCircleMarkers(lng= ~ stop_lon, lat= ~stop_lat,
data = stops, stroke = FALSE,
fillOpacity = 5, radius = 1)
stop_maps  # Show the map
# visualize the stops
stop_maps = leaflet() %>%
# Add CartoDB background map
addProviderTiles("OpenStreetMap.Mapnik") %>%
# Add a marker for each stop
addCircleMarkers(lng= ~ stop_lon, lat= ~stop_lat,
data = stops, stroke = FALSE,
fillOpacity = 5, radius = 3)
stop_maps  # Show the map
library(tidyverse)
library(kableExtra)
library(knitr)
library(leaflet)
library(tidytransit)
tokyo_gtfs <- read_gtfs('tokyo_trains.zip')
attach(tokyo_gtfs)
summary(tokyo_gtfs)
kable(head(tokyo_gtfs$stops))
# visualize the stops
stop_maps = leaflet() %>%
# Add CartoDB background map
addProviderTiles("OpenStreetMap.Mapnik") %>%
# Add a marker for each stop
addCircleMarkers(lng= ~ stop_lon, lat= ~stop_lat,
data = tokyo_gtfs$stops, stroke = FALSE,
fillOpacity = 5, radius = 3)
stop_maps  # Show the map
# extract stop ids from the same station.
# different agency has different stop ids for the same station
stop_ids <- tokyo_gtfs$stops %>%
filter(stop_name == '目黒') %>%
select(stop_id)
# extract trip info and time from stop_time based on stop_id
departure <- stop_ids %>%
inner_join(tokyo_gtfs$stop_times %>%
select(trip_id, arrival_time,
departure_time, stop_id),
by = "stop_id")
# add trip id
departure <- departure %>%
left_join(tokyo_gtfs$trips %>%
select(trip_id, route_id,
service_id, trip_headsign, direction_name),
by = "trip_id")
# add route info from routes
departure <- departure %>%
left_join(tokyo_gtfs$routes %>%
select(route_id,
route_long_name),
by = "route_id")
# right now service id has weekday and weekend mixed.
departure %>%
select(route_long_name,
trip_headsign,
arrival_time) %>%
arrange(arrival_time) %>%
knitr::kable()
weekday <- departure %>%
filter(grepl("Weekday", service_id, fixed = TRUE))
weekday %>%
select(route_long_name,
trip_headsign,
arrival_time) %>%
arrange(arrival_time) %>%
knitr::kable()
weekend <- departure %>%
filter(!grepl("Weekday", service_id, fixed = TRUE))
weekend %>%
select(route_long_name,
trip_headsign,
arrival_time) %>%
arrange(arrival_time) %>%
knitr::kable()
# map local exp logo, and number of cars
# output to csv?
# extract stop ids from the same station.
# different agency has different stop ids for the same station
stop_ids <- tokyo_gtfs$stops %>%
filter(stop_name == '目黒') %>%
select(stop_id)
# extract trip info and time from stop_time based on stop_id
departure <- stop_ids %>%
inner_join(tokyo_gtfs$stop_times %>%
select(trip_id, arrival_time,
departure_time, stop_id),
by = "stop_id")
# add trip id
departure <- departure %>%
left_join(tokyo_gtfs$trips %>%
select(trip_id, route_id,
service_id, trip_headsign, direction_name),
by = "trip_id")
# add route info from routes
departure <- departure %>%
left_join(tokyo_gtfs$routes %>%
select(route_id,
route_long_name),
by = "route_id")
# right now service id has weekday and weekend mixed.
departure %>%
select(route_long_name,
trip_headsign,
arrival_time) %>%
arrange(arrival_time) %>%
knitr::kable()
weekday <- departure %>%
filter(grepl("Weekday", service_id, fixed = TRUE))
weekday_schedule <- weekday %>%
select(route_long_name,
trip_headsign,
arrival_time) %>%
arrange(arrival_time)
knitr::kable(weekday_schedule)
weekend <- departure %>%
filter(!grepl("Weekday", service_id, fixed = TRUE))
weekend_schedule <- weekend %>%
select(route_long_name,
trip_headsign,
arrival_time) %>%
arrange(arrival_time)
knitr::kable(weekend_schedule)
# map local exp logo, and number of cars
# output to csv?
View(weekday_schedule)
write.csv(weekday_schedule, file = "weekday schedule")
write.csv(weekday_schedule, file = "weekday schedule.csv")
write.csv(weekday_schedule, file = "weekday schedule.csv", fileEncoding = "UTF-8")
write.csv(weekday_schedule, file = "weekday schedule.csv", fileEncoding = "UTF-8")
write.csv(weekday_schedule, file = "weekday schedule.csv", encoding = "UTF-8")
write.csv(weekday_schedule, file = "weekday schedule.csv", Encoding = "UTF-8")
write.csv(weekday_schedule, file = "weekday schedule.csv", fileEncoding = "UTF-8")
readr::write_csv(weekday_schedule, file = "weekday schedule.csv", fileEncoding = "UTF-8")
readr::write_csv(weekday_schedule, "weekday schedule.csv")
readr::write_csv(weekday_schedule, "weekday schedule.csv")
data.table::fwrite(weekday_schedule, "weekday schedule.csv")
# output
weekday_format <- file("weekday schedule.csv", encoding = "UTF-8")
write.csv(weekday_schedule, file = weekday_format)
# output
data.table::fwrite(weekday_schedule, "weekday schedule.csv")
# extract stop ids from the same station.
# different agency has different stop ids for the same station
stop_ids <- tokyo_gtfs$stops %>%
filter(stop_name == '目黒') %>%
select(stop_id)
# extract trip info and time from stop_time based on stop_id
departure <- stop_ids %>%
inner_join(tokyo_gtfs$stop_times %>%
select(trip_id, arrival_time,
departure_time, stop_id),
by = "stop_id")
# add trip id
departure <- departure %>%
left_join(tokyo_gtfs$trips %>%
select(trip_id, route_id,
service_id, trip_headsign, direction_name),
by = "trip_id")
# add route info from routes
departure <- departure %>%
left_join(tokyo_gtfs$routes %>%
select(route_id,
route_long_name),
by = "route_id")
# right now service id has weekday and weekend mixed.
departure %>%
select(route_long_name,
trip_headsign,
arrival_time) %>%
arrange(arrival_time) %>%
knitr::kable()
weekday <- departure %>%
filter(grepl("Weekday", service_id, fixed = TRUE))
weekday_schedule <- weekday %>%
select(route_long_name,
trip_headsign,
arrival_time) %>%
arrange(arrival_time)
knitr::kable(weekday_schedule)
# output for weekday schedule
data.table::fwrite(weekday_schedule, "weekday schedule.csv")
weekend <- departure %>%
filter(!grepl("Weekday", service_id, fixed = TRUE))
weekend_schedule <- weekend %>%
select(route_long_name,
trip_headsign,
arrival_time) %>%
arrange(arrival_time)
knitr::kable(weekend_schedule)
# output for weekend schedule
data.table::fwrite(weekend_schedule, "weekend schedule.csv")
library(tidyverse)
library(kableExtra)
library(knitr)
library(leaflet)
library(tidytransit)
tokyo_gtfs <- read_gtfs('tokyo_trains.zip')
attach(tokyo_gtfs)
summary(tokyo_gtfs)
kable(head(tokyo_gtfs$stops))
# visualize the stops
stop_maps = leaflet() %>%
# Add CartoDB background map
addProviderTiles("OpenStreetMap.Mapnik") %>%
# Add a marker for each stop
addCircleMarkers(lng= ~ stop_lon, lat= ~stop_lat,
data = tokyo_gtfs$stops, stroke = FALSE,
fillOpacity = 5, radius = 3)
stop_maps  # Show the map
View(tokyo_gtfs)
View(tokyo_gtfs[["routes"]])
# extract stop ids from the same station.
# different agency has different stop ids for the same station
stop_ids <- tokyo_gtfs$stops %>%
filter(stop_name == '目黒') %>%
select(stop_id)
# extract trip info and time from stop_time based on stop_id
departure <- stop_ids %>%
inner_join(tokyo_gtfs$stop_times %>%
select(trip_id, arrival_time,
departure_time, stop_id),
by = "stop_id")
# add trip id
departure <- departure %>%
left_join(tokyo_gtfs$trips %>%
select(trip_id, route_id,
service_id, trip_headsign, direction_name),
by = "trip_id")
# add route info from routes
departure <- departure %>%
left_join(tokyo_gtfs$routes %>%
select(route_id,
route_long_name),
by = "route_id")
# right now service id has weekday and weekend mixed.
departure %>%
select(route_long_name,
trip_headsign,
arrival_time) %>%
arrange(arrival_time) %>%
knitr::kable()
weekday <- departure %>%
filter(grepl("Weekday", service_id, fixed = TRUE))
weekday_schedule <- weekday %>%
select(route_long_name,
trip_headsign,
arrival_time) %>%
arrange(arrival_time)
knitr::kable(weekday_schedule)
# output for weekday schedule
data.table::fwrite(weekday_schedule, "weekday schedule.csv")
weekend <- departure %>%
filter(!grepl("Weekday", service_id, fixed = TRUE))
weekend_schedule <- weekend %>%
select(route_long_name,
trip_headsign,
arrival_time) %>%
arrange(arrival_time)
knitr::kable(weekend_schedule)
# output for weekend schedule
data.table::fwrite(weekend_schedule, "weekend schedule.csv")
View(weekday)
View(weekday_schedule)
